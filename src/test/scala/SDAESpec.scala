import breeze.linalg.{DenseVector, DenseMatrix}
import fortytwo.activations._
import fortytwo.networks.SDAE
import org.scalatest.FlatSpec

/**
 * Created by sasakiumi on 7/31/14.
 */
class SDAESpec extends FlatSpec {
  "Stacked denoising auto encoder" should "pretrain" in {
    val xs = DenseMatrix(
      (0.0, 0.1, 0.0, 0.9),
      (0.9, 0.1, 0.0, 0.2),
      (0.1, 0.0, 0.1, 0.9),
      (0.9, 0.0, 0.1, 0.0),
      (0.1, 0.0, 0.3, 0.9),
      (0.8, 0.2, 0.0, 0.0),
      (0.1, 0.0, 0.2, 0.9),
      (0.9, 0.1, 0.3, 0.0),
      (0.1, 0.0, 0.2, 0.8),
      (0.9, 0.3, 0.0, 0.1),
      (0.0, 0.1, 0.3, 0.9),
      (0.9, 0.2, 0.1, 0.2),
      (0.0, 0.3, 0.0, 0.9),
      (0.7, 0.5, 0.3, 0.0),
      (0.0, 0.3, 0.1, 0.9),
      (0.9, 0.4, 0.1, 0.1),
      (0.0, 0.1, 0.3, 0.9),
      (0.8, 0.4, 0.0, 0.1)
    )

    val ys = DenseMatrix(
      (0.0, 0.9),
      (0.9, 0.1),
      (0.1, 0.9),
      (0.9, 0.0),
      (0.1, 0.9),
      (0.8, 0.2),
      (0.1, 0.9),
      (0.9, 0.1),
      (0.1, 0.8),
      (0.9, 0.3),
      (0.0, 0.9),
      (0.9, 0.0),
      (0.0, 0.9),
      (0.7, 0.0),
      (0.0, 0.9),
      (0.9, 0.4),
      (0.0, 0.9),
      (0.8, 0.0)
    )
    val sdae = SDAE(Array(4,3,3,2))
    sdae.pretrain(xs)
    assert(sigmoid(0.0) == 0.5)
  }

  it should "complete finetune" in {
    val xs = DenseMatrix(
      (0.0, 0.1, 0.0, 0.0, 0.9),
      (0.9, 0.1, 0.0, 0.0, 0.2),
      (0.1, 0.0, 0.1, 0.0, 0.9),
      (0.9, 0.0, 0.1, 0.0, 0.0),
      (0.1, 0.0, 0.3, 0.0, 0.9),
      (0.8, 0.2, 0.0, 0.0, 0.0),
      (0.1, 0.0, 0.2, 0.1, 0.9),
      (0.9, 0.1, 0.3, 0.0, 0.0),
      (0.1, 0.0, 0.2, 0.1, 0.8),
      (0.9, 0.3, 0.0, 0.0, 0.1),
      (0.0, 0.1, 0.3, 0.0, 0.9),
      (0.9, 0.2, 0.1, 0.0, 0.2),
      (0.0, 0.3, 0.0, 0.1, 0.9),
      (0.7, 0.5, 0.3, 0.0, 0.0),
      (0.0, 0.3, 0.1, 0.0, 0.9),
      (0.9, 0.4, 0.1, 0.0, 0.1),
      (0.0, 0.1, 0.3, 0.1, 0.9),
      (0.8, 0.4, 0.0, 0.0, 0.1)
    )

    val ys = DenseMatrix(
      (0.0, 0.9),
      (0.9, 0.1),
      (0.1, 0.9),
      (0.9, 0.0),
      (0.1, 0.9),
      (0.8, 0.2),
      (0.1, 0.9),
      (0.9, 0.1),
      (0.1, 0.8),
      (0.9, 0.3),
      (0.0, 0.9),
      (0.9, 0.0),
      (0.0, 0.9),
      (0.7, 0.0),
      (0.0, 0.9),
      (0.9, 0.4),
      (0.0, 0.9),
      (0.8, 0.0)
    )
    val sdae = SDAE(Array(5,4,3,2))
    sdae.pretrain(xs)
    sdae.finetune(xs, ys)
    val ans = sdae.predict(DenseVector(0.9, 0.1, 0.0, 0.0, 0.0))
    println(ans)
  }
}
